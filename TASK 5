import tkinter as tk
from tkinter import messagebox, simpledialog
import json
import os

DATA_FILE = "contacts.json"

def load_contacts():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}

def save_contacts(contacts):
    with open(DATA_FILE, "w") as f:
        json.dump(contacts, f, indent=4)

class ContactBookApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Contact Book")
        self.root.geometry("500x500")
        self.contacts = load_contacts()

        self.name_var = tk.StringVar()
        self.phone_var = tk.StringVar()
        self.email_var = tk.StringVar()
        self.address_var = tk.StringVar()

        tk.Label(root, text="Name:").pack()
        tk.Entry(root, textvariable=self.name_var).pack()

        tk.Label(root, text="Phone:").pack()
        tk.Entry(root, textvariable=self.phone_var).pack()

        tk.Label(root, text="Email:").pack()
        tk.Entry(root, textvariable=self.email_var).pack()

        tk.Label(root, text="Address:").pack()
        tk.Entry(root, textvariable=self.address_var).pack()

        tk.Button(root, text="Add Contact", command=self.add_contact, bg="lightblue").pack(pady=5)
        tk.Button(root, text="View All Contacts", command=self.view_contacts, bg="lightgreen").pack()
        tk.Button(root, text="Search Contact", command=self.search_contact, bg="lightyellow").pack()
        tk.Button(root, text="Update Contact", command=self.update_contact, bg="orange").pack()
        tk.Button(root, text="Delete Contact", command=self.delete_contact, bg="salmon").pack()

        self.result_text = tk.Text(root, height=10, wrap=tk.WORD)
        self.result_text.pack(pady=10)

    def add_contact(self):
        name = self.name_var.get().strip()
        if not name:
            messagebox.showerror("Error", "Name is required!")
            return
        self.contacts[name] = {
            "phone": self.phone_var.get(),
            "email": self.email_var.get(),
            "address": self.address_var.get()
        }
        save_contacts(self.contacts)
        messagebox.showinfo("Success", f"Contact '{name}' added.")
        self.clear_inputs()

    def view_contacts(self):
        self.result_text.delete("1.0", tk.END)
        for name, info in self.contacts.items():
            self.result_text.insert(tk.END, f"{name} - {info['phone']}\n")

    def search_contact(self):
        keyword = simpledialog.askstring("Search", "Enter name or phone:")
        self.result_text.delete("1.0", tk.END)
        for name, info in self.contacts.items():
            if keyword.lower() in name.lower() or keyword in info["phone"]:
                self.result_text.insert(tk.END, f"{name}: {info}\n")

    def update_contact(self):
        name = simpledialog.askstring("Update", "Enter contact name:")
        if name in self.contacts:
            phone = simpledialog.askstring("Phone", "New phone:")
            email = simpledialog.askstring("Email", "New email:")
            address = simpledialog.askstring("Address", "New address:")
            self.contacts[name] = {"phone": phone, "email": email, "address": address}
            save_contacts(self.contacts)
            messagebox.showinfo("Updated", f"Contact '{name}' updated.")
        else:
            messagebox.showerror("Not Found", "Contact not found.")

    def delete_contact(self):
        name = simpledialog.askstring("Delete", "Enter contact name:")
        if name in self.contacts:
            del self.contacts[name]
            save_contacts(self.contacts)
            messagebox.showinfo("Deleted", f"Contact '{name}' deleted.")
        else:
            messagebox.showerror("Not Found", "Contact not found.")

    def clear_inputs(self):
        self.name_var.set("")
        self.phone_var.set("")
        self.email_var.set("")
        self.address_var.set("")

if __name__ == "__main__":
    root = tk.Tk()
    app = ContactBookApp(root)
    root.mainloop()
